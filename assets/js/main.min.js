/* @preserve Cookie Consent Init */
function createCookie(e,t,n){var o="";if(n){var a=new Date;a.setTime(a.getTime()+24*n*60*60*1e3),o="; expires="+a.toUTCString()}document.cookie=`${e}=${t}${o}; path=/`}function readCookie(e){for(var t=e+"=",n=document.cookie.split(";"),o=0;o<n.length;o++){for(var a=n[o];" "===a.charAt(0);)a=a.substring(1,a.length);if(0===a.indexOf(t))return a.substring(t.length,a.length)}return null}function addCookieConsentListener(){document.getElementById("cookie-notice-accept").addEventListener("click",(function(){createCookie(cookieName,"true",31),document.getElementById("cookie-notice").style.display="none",location.reload()}))}function googleAnalytics(){if(""!==analyticsName.toLowerCase()){function e(){dataLayer.push(arguments)}window.dataLayer=window.dataLayer||[],e("js",new Date),e("config",analyticsName,{anonymize_ip:!0}),analyticsNameGA4&&e("config",analyticsNameGA4,{anonymize_ip:!0})}}"true"===isCookieConsent.toLowerCase()?(addCookieConsentListener(),"true"===readCookie(cookieName)?googleAnalytics():document.getElementById("cookie-notice").style.display="block"):googleAnalytics()
/* @preserve Dark mode Init */;const themeButton={light:`<i class="fas fa-adjust" aria-hidden="true"></i><span class="navbar-label-with-icon"> ${darkBtn}</span>`,dark:`<i class="fas fa-adjust fa-rotate-180" aria-hidden="true"></i><span class="navbar-label-with-icon"> ${lightBtn}</span>`};function currentTheme(){return localStorage.getItem("theme")}function setMode(e){document.documentElement.setAttribute("data-theme",e),localStorage.setItem("theme",e);const t=document.getElementById("theme-toggle");t&&(t.innerHTML=themeButton[e])}function themeToggle(){setMode("light"===currentTheme()?"dark":"light")}function bootstrapTheme(){if(isAutoTheme){if(!currentTheme()){let e=window.matchMedia("(prefers-color-scheme: dark)");e.matches&&localStorage.setItem("theme","dark"),e.addEventListener("change",(()=>{e.matches&&localStorage.setItem("theme","dark")}))}let e=currentTheme();setMode(e||"light")}}bootstrapTheme();
/* @preserve Masonry Init */
try{var elem=document.querySelector(".grid"),msnry=new Masonry(elem,{itemSelector:".grid-item",columnWidth:".grid-sizer",gutter:".gutter-sizer",percentPosition:!0}),imgLoad=imagesLoaded(elem);imgLoad.on("progress",(function(e,t){msnry.layout()}))}catch(e){if(!(e instanceof ReferenceError))throw e}
/* @preserve Navbar */document.addEventListener("DOMContentLoaded",(function(e){const t=document.getElementById("pull"),n=document.querySelector("nav ul");["click","touch"].forEach((function(e){t?.addEventListener(e,(function(){n.classList.toggle("hide")}),!1)})),window.addEventListener("scroll",(function(){const e=-(window.scrollY||window.pageYOffset||document.body.scrollTop)/3,t=document.getElementById("main");t&&(t.style.backgroundPosition="100% "+(e-50)+"px, 0%, center top")}))}));

const mainProgressBar = document.querySelector(
    ".progress-bar--primary .progress-bar__fill"
  );
const mainPosts = document.querySelectorAll(".main-post");
const posts = document.querySelectorAll(".post");

let i = 0;
let postIndex = 0;
let currentPost = posts[postIndex];
let currentMainPost = mainPosts[postIndex];

let progressInterval = setInterval(progress, 100);

function progress() {
if (i === 100) {
  i = -5;
  // reset progress bar
  currentPost.querySelector(".progress-bar__fill").style.width = 0;
  mainProgressBar.style.width = 0;
  currentPost.classList.remove("post--active");

  postIndex++;

  currentMainPost.classList.add("main-post--not-active");
  currentMainPost.classList.remove("main-post--active");

  // reset postIndex to loop over the slides again
  if (postIndex === posts.length) {
    postIndex = 0;
  }

  currentPost = posts[postIndex];
  currentMainPost = mainPosts[postIndex];
} else {
  i++;
  currentPost.querySelector(".progress-bar__fill").style.width = `${i}%`;
  mainProgressBar.style.width = `${i}%`;
  currentPost.classList.add("post--active");

  currentMainPost.classList.add("main-post--active");
  currentMainPost.classList.remove("main-post--not-active");
}
}

posts.forEach((post, index) => {
post.addEventListener("click", () => {
  disablePostsTemporarily();
  i = 0; // Reset the progress bar
  postIndex = index;
  updatePosts();
});
});

function disablePostsTemporarily() {
// Disable pointer events on all posts
posts.forEach((post) => {
  post.classList.add("post--disabled");
});

// Re-enable pointer events after 2 1/2 seconds
setTimeout(() => {
  posts.forEach((post) => {
    post.classList.remove("post--disabled");
  });
}, 2500);
}

function updatePosts() {
// Reset all progress bars and classes
posts.forEach((post) => {
  post.querySelector(".progress-bar__fill").style.width = 0;
  post.classList.remove("post--active");
});

mainPosts.forEach((mainPost) => {
  mainPost.classList.add("main-post--not-active");
  mainPost.classList.remove("main-post--active");
});

// Update the current post and main post
currentPost = posts[postIndex];
currentMainPost = mainPosts[postIndex];

currentPost.querySelector(".progress-bar__fill").style.width = `${i}%`;
mainProgressBar.style.width = `${i}%`;
currentPost.classList.add("post--active");

currentMainPost.classList.add("main-post--active");
currentMainPost.classList.remove("main-post--not-active");
}